from: http://blog.csdn.net/woniu02141/article/details/49836443
5.创建Gunicorn的启动脚本

    创建文件/webapps/hello_django/bin/gunicorn_start

cd /webapps/hello_django/bin/
vim gunicorn_start

    在vim中编辑文件
    输入i进入编辑模式
    粘贴文本内容
    :w 保存修改
    :q 退出

(...)
NAME="hello_app"                                  # Django应用的名称
DJANGODIR=/webapps/hello_django/hello             # Django 项目的目录
SOCKFILE=/webapps/hello_django/run/gunicorn.sock  
USER=user_hello_django                                        # 用户名
GROUP=webapps                                     # 用户组
NUM_WORKERS=3                                     # 一般是服务器使用CPU的个数X2+1，所以一个CPU的话，worker就是3
DJANGO_SETTINGS_MODULE=hello.settings             # Django应用使用的settings文件
DJANGO_WSGI_MODULE=hello.wsgi                     # WSGI 模块名称
(...)


给文件添加可执行权限
sudo chmod u+x bin/gunicorn_start
6.创建Supervisor配置文件

在/etc/supervisor/conf.d目录下创建文件hello.conf
内容如下：

[program:hello]
command = /webapps/hello_django/bin/gunicorn_start                    #指定启动Django app的命令，也是刚才创建的gunicorn脚本
user = user_hello_django                                                          #用户名
stdout_logfile = /webapps/hello_django/logs/gunicorn_supervisor.log   #运行日志存放位置
redirect_stderr = true                                                #把stderr日志也放在刚才的文件里

注意到日志文件还没有创建，我们来创建一下：

 mkdir -p /webapps/hello_django/logs/
 touch /webapps/hello_django/logs/gunicorn_supervisor.log 

可以使用下面的命令控件Supervisor

sudo supervisorctl reread #修改配置文件后需要使用
sudo supervisorctl update #更新状态，会启动刚配置的应用
sudo supervisorctl status hello #查看应用状态
sudo supervisorctl stop hello #停止应用
sudo supervisorctl start hello #启动应用
sudo supervisorctl restart hello #重启应用
7. 创建Nginx虚拟服务器

在目录/etc/nginx/sites-available下创建hello文件

upstream hello_app_server {
  server unix:/webapps/hello_django/run/gunicorn.sock fail_timeout=0;
}

server {
    listen   80;
    server_name hello.test;

client_max_body_size 4G;

access_log /webapps/hello_django/logs/nginx-access.log;
error_log /webapps/hello_django/logs/nginx-error.log;

location /static/ {
    alias   /webapps/hello_django/static/;
}

location /media/ {
    alias   /webapps/hello_django/media/;
}

location / {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    if (!-f $request_filename) {
        proxy_pass http://hello_app_server;
        break;
    }
}

执行命令进行文件链接
sudo ln -s /etc/nginx/sites-available/hello /etc/nginx/sites-enabled/hello
sudo service nginx restart
命令解释：
ln -s 建立两个文件之间的同步链接，这时/etc/nginx/sites-available/hello和/etc/nginx/sites-enabled/hello的内容将会完全相同，以后要修改的话也只需要修改/sites-available/hello的内容，会自动同步

如果nginx restart 显示 fail, 可以使用sudo nginx -t命令查看失败原因

注意在Django的settings文件中INSTALLED_APPS加入gunicorn

修改内容后：

sudo service nginx restart
sudo supervisorctl restart hello     

    参考文章：
    Setting up Django with Nginx, Gunicorn, virtualenv, supervisor and PostgreSQL
    本文主要是由该文章翻译整理而来，向大神致敬。

